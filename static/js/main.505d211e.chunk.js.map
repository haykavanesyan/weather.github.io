{"version":3,"sources":["icons/storm.png","icons/cloud.png","weather/weather.module.css","icons/temp.png","logo.svg","weather/weather.js","weather/weatherContainer.js","App.js","serviceWorker.js","redux/weatherReducer.js","redux/store.js","index.js","icons/sun.png","icons/rain.png"],"names":["module","exports","Weather","props","className","s","body","citySearch","onChange","e","a","target","value","changeInputValue","inputValue","button","onClick","click","weatherInfo","main","temp","src","city","name","weather","weatherIcon","cityName","weatherContainer","this","axios","then","res","setState","data","clearValue","sun","rain","cloud","storm","citysWeather","bind","React","Component","connect","state","dispatch","type","App","Boolean","window","location","hostname","match","stateDefault","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.505d211e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/storm.8d5deced.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud.deb2da7b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"weather_body__1sOoT\",\"weatherInfo\":\"weather_weatherInfo__3Pfom\",\"citySearch\":\"weather_citySearch__2JtV8\",\"button\":\"weather_button__l8BK7\",\"cityName\":\"weather_cityName__3Ma0f\",\"temp\":\"weather_temp__1AFQJ\",\"city\":\"weather_city__3LLFO\",\"weather\":\"weather_weather__j2320\"};","module.exports = __webpack_public_path__ + \"static/media/temp.c66fafbd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport s from './weather.module.css'\r\nimport temp from '../icons/temp.png'\r\nimport sun from '../icons/sun.png'\r\nimport rain from '../icons/rain.png'\r\nimport storm from '../icons/storm.png'\r\nimport cloud from '../icons/cloud.png'\r\n\r\n\r\n\r\nlet Weather = (props) =>{\r\n\t\r\n    let valueChanger=(e)=>{\r\n    \tlet a = e.target.value\r\n    \tprops.changeInputValue(a)\r\n    } \r\n\r\n    \r\n\r\n\treturn (\r\n        \r\n        <div className={s.body}>\r\n            \r\n            <input className={s.citySearch} onChange={valueChanger} value={props.inputValue}></input>\r\n            <button className={s.button} onClick={props.click}>Search</button> \r\n\r\n            \r\n           {!props.weatherInfo.main ? <p className={s.cityName}>Hike's WeatherApp</p> :\r\n\r\n           <div className={s.weatherInfo}>\r\n           <div className={s.temp}><img src={temp}/><p> {props.weatherInfo.main.temp}Â°</p> </div> \r\n\r\n           <div className={s.city}> <p>{props.weatherInfo.name}</p></div>\r\n           <div className={s.weather}> <img src={props.weatherIcon()}/> </div>\r\n           \r\n           \r\n           \r\n            \r\n           </div>}\r\n            \r\n            \r\n        </div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default Weather","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Weather from './weather'\r\nimport * as axios from 'axios'\r\nimport sun from '../icons/sun.png'\r\nimport rain from '../icons/rain.png'\r\nimport storm from '../icons/storm.png'\r\nimport cloud from '../icons/cloud.png'\r\n\r\nclass weatherContainer extends React.Component{\r\n\r\ncitysWeather(){\r\n\r\n\t\tlet citySearch = this.props.inputValue\r\n\t\taxios.get(`https://api.openweathermap.org/data/2.5/weather?q=${citySearch}&appid=d00ebd7514a99801bdd4bf8a81075167&units=metric`).then(res=>{\r\n\t\t\tthis.props.setState(res.data)\t\t\r\n\t\t})\r\n\t\t   this.props.clearValue()\r\n\t}\r\n\r\n\t\r\n weatherIcon() {\r\n         switch (this.props.weatherInfo.weather[0].main) {\r\n                 case \"Clear\":\r\n                    return sun\r\n                    break;\r\n                 case \"Rain\":\r\n                    return rain\r\n                    break;\r\n                 case \"Clouds\":\r\n                    return cloud\r\n                    break;\r\n                 case \"Storm\":\r\n                    return storm\r\n                    break;\r\n                 \r\n                }\r\n    }\r\n\r\n\r\n\trender(){\r\n\t\treturn <Weather  \r\n\t\tweatherInfo={this.props.weatherInfo} \r\n\t\tinputValue={this.props.inputValue}\r\n\t\tchangeInputValue={this.props.changeInputValue}\r\n\t\tclick = {this.citysWeather.bind(this)}\r\n\t\tweatherIcon = {this.weatherIcon.bind(this)}\r\n\t\t/>\r\n\r\n\r\n\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) =>{\r\n\treturn ({\r\n\t\tweatherInfo: state.weatherInfo.weatherInfo,\r\n\t\tinputValue: state.weatherInfo.inputValue,\r\n\t\tcity: state.weatherInfo.city\r\n\t})\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) =>{\r\n\treturn ({\r\n\t\tsetState: (data) => {dispatch({type: \"SET_STATE\", data})},\r\n\t\tchangeInputValue: (value) => {dispatch({type: \"INPUT_VALUE\", value})},\r\n\t\tclearValue: () =>{dispatch({type: \"CLEAR_VALUE\"})}\r\n\t\t\r\n\t})\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(weatherContainer)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherContainer from './weather/weatherContainer'\n\n\n\nlet App = (props) => {\n       \n     return <WeatherContainer />\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let stateDefault = {\r\n\tweatherInfo: {},\r\n\tinputValue: \"\",\r\n\tcity: \"\",\r\n}\r\n\r\nexport let weatherReducer = (state = stateDefault, action) => {\r\n\r\n\tswitch (action.type) {\r\n\t\tcase \"INPUT_VALUE\":\r\n\t\t     return {\r\n\t\t     \t...state,\r\n\t\t     \tinputValue: action.value,\r\n\t\t     \t\r\n\r\n\t\t     }\r\n\t\t\treturn state;\r\n\t\tcase \"SET_STATE\":\r\n\t\t     return {\r\n\t\t     \t...state,\r\n\t\t     \tweatherInfo: {...action.data}\r\n\t\t     }\r\n\t\t\treturn state;\r\n        case \"CLEAR_VALUE\":\r\n        return {\r\n        \t...state,\r\n        \tinputValue: \"\"\r\n        }\r\n\t\t\r\n\r\n\t\tdefault:\r\n\t\t return state\r\n\t}\r\n}","import {combineReducers, createStore} from 'redux'\r\nimport {weatherReducer} from './weatherReducer'\r\n\r\nlet reducers = combineReducers({\r\n\tweatherInfo: weatherReducer,\r\n})\r\nlet store = createStore(reducers)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sun.540e3938.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.b295288e.png\";"],"sourceRoot":""}